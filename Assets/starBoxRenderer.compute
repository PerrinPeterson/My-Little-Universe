// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

//Skybox Params
int width;
int height;
int depth;
float baseRadius;
float radiusIncrease;
float AUSize; //The size of the AU, Unity units
float glowMultiplier;
uint2 resolution;
float3 stepSize;
float3 topLeft;
float3 test; //The test Direction, to tell which axis we're working in.
float3 starSectorSize; //The size of the star sector, in AU
int3 startingStarIndex; //The current star index

//Skybox Buffers
StructuredBuffer<float3> starOffsets; //The offsets of the stars, in AU
StructuredBuffer<float4> starColors;
StructuredBuffer<float> starSizes; //Technically are ints, but Im pretty sure the GPU will treat them as floats anyway

int ConvertToIndex(int3 starIndex)
{
    //Convert the 3D index to a 1D index
    return starIndex.x + starIndex.y * width + starIndex.z * width * height;
}

//TODO: look into doing wavelength based glow, the lerp allows me to do that, allowing for a color shift based on the distance from the star.
float CalculateGlowStrength(float percent)
{
    float maxVal = 0.75f; //The maximum value of the curve

    float str = pow(percent, 4); //The strength of the glow, based on the percent of the glow that the ray travels through

    //Clamp the value between 0 and max
    str = max(str, 0);
    str = min(str, maxVal);

    return str;
}

bool CheckForStarHit(float3 direction, float3 exitPoint, int3 starIndex, out float4 color)
{
    int index = ConvertToIndex(starIndex);
    float starRadius = (starSizes[index] * radiusIncrease + baseRadius) / AUSize;
    float3 starPosition = starOffsets[index] + (starIndex - startingStarIndex) * starSectorSize;
    float3 starDirection = starPosition - exitPoint;
    starDirection = normalize(starDirection);
    
    float a = 1; //the dot product of the direction vector, so long as it's normalized
    float b = 2 * dot(starDirection, direction);
    float c = dot(starDirection, starDirection) - starRadius * starRadius;
    
    float discriminant = b * b - 4 * a * c;
    
    if (discriminant >= 0)
    {
        //Possible Hit
        discriminant = sqrt(discriminant);
        float t1 = (-b - discriminant) / (2 * a);
        float t2 = (-b + discriminant) / (2 * a);
        
        if ((t1 >= 0 && t1 <= 1) || (t2 >= 0 && t2 <= 1))
        {
            //Hit
            color = starColors[index];
            return true;
        }
    }
    
    //Outer Glow Radius
    c = dot(starDirection, starDirection) - (starRadius * glowMultiplier) * (starRadius * glowMultiplier);
    discriminant = b * b - 4 * a * c;
    
    //Outer glow just allows us to inherit some of the light from the star, we can think of it as reflecting off the dust and gas in the star system
    if (discriminant >= 0)
    {
        //Possible Hit
        discriminant = sqrt(discriminant);
        float t1 = (-b - discriminant) / (2 * a);
        float t2 = (-b + discriminant) / (2 * a);
        
        if ((t1 >= 0 && t1 <= 1) || (t2 >= 0 && t2 <= 1))
        {
            float glowDiameter = starRadius * 2 * glowMultiplier;
            
            float3 intersectionOne = exitPoint + direction * t1;
            float3 intersectionTwo = exitPoint + direction * t2;
            
            float distance = length(intersectionOne - intersectionTwo);
            
            float percent = distance / glowDiameter;
            
            float glow = CalculateGlowStrength(percent);
            
            color = lerp(float4(0, 0, 0, 1), starColors[index], glow);
            return false;
        }
    }
    
    color = float4(0, 0, 0, 1);
    return false;
}


//TODO: Fix the UV issues
[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //error catch, if the id is out of bounds, return.
    if (id.x >= resolution.x || id.y >= resolution.y)
        return;
    
    //Result[id.xy] = float4(id.x / 2000.0f, id.y / 2000.0f, 0, 1); //The color of the pixel
    //return;
    
    
    float4 backupColor = float4(0, 0, 0, 1);

    float3 rayOrigin = float3(0, 0, 0);
    int3 currentIndex = startingStarIndex; //The current index of the ray
    int iterations = 0;
    int breakLimit = 10000;
    
    //Decide what plane is flat
    if (test.x == 0)
    {

        float3 directionStep = float3(0, stepSize.y * id.y, stepSize.z * id.x); //The step to align the ray to the correect exitPoint

        
        float3 exitPoint = topLeft + directionStep;
        float3 direction = normalize(exitPoint);
        float3 step = sign(direction); //the step the ray will take in each direction
        float3 nextSectorBoundry = step > 0 ? starSectorSize / 2 : -starSectorSize / 2; //The next sector boundry, based on the direction of the ray
        float3 tMax = (nextSectorBoundry - rayOrigin) / direction; //The time to the next sector boundry
        float3 tDelta = starSectorSize / abs(direction); //The time to the next sector boundry, based on the size of the sector
        
        int iterations = 0; 
        int breakLimit = 10000; 
        
        while (currentIndex.x < width && currentIndex.y < height && currentIndex.z < depth &&
               currentIndex.x >= 0 && currentIndex.y >= 0 && currentIndex.z >= 0)
        {
            //Step first, because with this method we're starting in the origin sector
            if (tMax.x < tMax.y && tMax.x < tMax.z)
            {
                currentIndex.x += step.x;
                tMax.x += tDelta.x;
            }
            else if (tMax.y < tMax.z)
            {
                currentIndex.y += step.y;
                tMax.y += tDelta.y;
            }
            else
            {
                currentIndex.z += step.z;
                tMax.z += tDelta.z;
            }
            
            //Break out if we're out of bounds
            if (currentIndex.x >= width && currentIndex.y >= height && currentIndex.z >= depth &&
               currentIndex.x < 0 && currentIndex.y < 0 && currentIndex.z < 0)
            {
                break;
            }
            
            float t = min(tMax.x, min(tMax.y, tMax.z));
            exitPoint = rayOrigin + direction * t;
            
            float4 inheritedColor = float4(0, 0, 0, 1); //The color of the star we hit
            
            if(CheckForStarHit(direction, exitPoint, currentIndex, inheritedColor))
            {
                backupColor.r = max(backupColor.r, inheritedColor.r);
                backupColor.g = max(backupColor.g, inheritedColor.g);
                backupColor.b = max(backupColor.b, inheritedColor.b);
                
                break;
            }
            else
            {
                backupColor.r = max(backupColor.r, inheritedColor.r);
                backupColor.g = max(backupColor.g, inheritedColor.g);
                backupColor.b = max(backupColor.b, inheritedColor.b);
            }
            
            if (iterations >= breakLimit)
            {
                //If we hit the break limit, we can assume that we're in an infinite loop, so we can just return red
                backupColor = float4(1, 0, 0, 1);
                break;
            }
            iterations++;
            
        }
        Result[id.xy] = backupColor;
    }
    else if (test.y == 0)
    {
        //DDA style algorythm
        float3 directionStep = float3(stepSize.x * id.x, 0, stepSize.z * id.y); //The step to align the ray to the correect exitPoint
        float3 exitPoint = topLeft + directionStep;
        float3 direction = normalize(exitPoint);
        float3 step = sign(direction); //the step the ray will take in each direction
        float3 nextSectorBoundry = step > 0 ? starSectorSize / 2 : -starSectorSize / 2; //The next sector boundry, based on the direction of the ray
        float3 tMax = (nextSectorBoundry - rayOrigin) / direction; //The time to the next sector boundry
        float3 tDelta = starSectorSize / abs(direction); //The time to the next sector boundry, based on the size of the sector
        
        int iterations = 0; 
        int breakLimit = 10000; 
        
        while (currentIndex.x < width && currentIndex.y < height && currentIndex.z < depth &&
               currentIndex.x >= 0 && currentIndex.y >= 0 && currentIndex.z >= 0)
        {
            //Step first, because with this method we're starting in the origin sector
            if (tMax.x < tMax.y && tMax.x < tMax.z)
            {
                currentIndex.x += step.x;
                tMax.x += tDelta.x;
            }
            else if (tMax.y < tMax.z)
            {
                currentIndex.y += step.y;
                tMax.y += tDelta.y;
            }
            else
            {
                currentIndex.z += step.z;
                tMax.z += tDelta.z;
            }
            
            //Break out if we're out of bounds
            if (currentIndex.x >= width && currentIndex.y >= height && currentIndex.z >= depth &&
               currentIndex.x < 0 && currentIndex.y < 0 && currentIndex.z < 0)
            {
                break;
            }
            
            float t = min(tMax.x, min(tMax.y, tMax.z));
            exitPoint = rayOrigin + direction * t; 
            
            float4 inheritedColor = float4(0, 0, 0, 1); //The color of the star we hit
            
            if (CheckForStarHit(direction, exitPoint, currentIndex, inheritedColor))
            {
                backupColor.r = max(backupColor.r, inheritedColor.r);
                backupColor.g = max(backupColor.g, inheritedColor.g);
                backupColor.b = max(backupColor.b, inheritedColor.b);
                
                break;
            }
            else
            {
                backupColor.r = max(backupColor.r, inheritedColor.r);
                backupColor.g = max(backupColor.g, inheritedColor.g);
                backupColor.b = max(backupColor.b, inheritedColor.b);
            }
            
            if (iterations >= breakLimit)
            {
                //If we hit the break limit, we can assume that we're in an infinite loop, so we can just return red
                backupColor = float4(1, 0, 0, 1);
                break;
            }
            iterations++;
            
        }
        Result[id.xy] = backupColor;
    }
    else
    {
        //DDA style algorythm
        float3 directionStep = float3(stepSize.x * id.x, stepSize.y * id.y, 0); //The step to align the ray to the correect exitPoint
        float3 exitPoint = topLeft + directionStep;
        float3 direction = normalize(exitPoint);
        float3 step = sign(direction); //the step the ray will take in each direction
        float3 nextSectorBoundry = step > 0 ? starSectorSize / 2 : -starSectorSize / 2; //The next sector boundry, based on the direction of the ray
        float3 tMax = (nextSectorBoundry - rayOrigin) / direction; //The time to the next sector boundry
        float3 tDelta = starSectorSize / abs(direction); //The time to the next sector boundry, based on the size of the sector
        
        int iterations = 0;
        int breakLimit = 10000; 
        
        while (currentIndex.x < width && currentIndex.y < height && currentIndex.z < depth &&
               currentIndex.x >= 0 && currentIndex.y >= 0 && currentIndex.z >= 0)
        {
            //Step first, because with this method we're starting in the origin sector
            if (tMax.x < tMax.y && tMax.x < tMax.z)
            {
                currentIndex.x += step.x;
                tMax.x += tDelta.x;
            }
            else if (tMax.y < tMax.z)
            {
                currentIndex.y += step.y;
                tMax.y += tDelta.y;
            }
            else
            {
                currentIndex.z += step.z;
                tMax.z += tDelta.z;
            }
            
            //Break out if we're out of bounds
            if (currentIndex.x >= width && currentIndex.y >= height && currentIndex.z >= depth &&
               currentIndex.x < 0 && currentIndex.y < 0 && currentIndex.z < 0)
            {
                break;
            }

            float t = min(tMax.x, min(tMax.y, tMax.z));
            exitPoint = rayOrigin + direction * t;
            
            float4 inheritedColor = float4(0, 0, 0, 1); //The color of the star we hit
            
            if (CheckForStarHit(direction, exitPoint, currentIndex, inheritedColor))
            {
                backupColor.r = max(backupColor.r, inheritedColor.r);
                backupColor.g = max(backupColor.g, inheritedColor.g);
                backupColor.b = max(backupColor.b, inheritedColor.b);
                
                break; 
            }
            else
            {
                backupColor.r = max(backupColor.r, inheritedColor.r);
                backupColor.g = max(backupColor.g, inheritedColor.g);
                backupColor.b = max(backupColor.b, inheritedColor.b);
            }
            
            if (iterations >= breakLimit)
            {
                //If we hit the break limit, we can assume that we're in an infinite loop, so we can just return red
                backupColor = float4(1, 0, 0, 1);
                break;
            }
            iterations++;
            
        }
        Result[id.xy] = backupColor;
    }
}

